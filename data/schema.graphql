input _idOperatorsFilterFindManysongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterFindManyuserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterFindOnesongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterFindOneuserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterRemoveManysongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterRemoveManyuserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterRemoveOnesongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterRemoveOneuserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterUpdateManysongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterUpdateManyuserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterUpdateOnesongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input _idOperatorsFilterUpdateOneuserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input ArtistOperatorsFilterFindManysongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input ArtistOperatorsFilterFindOnesongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input ArtistOperatorsFilterRemoveManysongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input ArtistOperatorsFilterRemoveOnesongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input ArtistOperatorsFilterUpdateManysongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input ArtistOperatorsFilterUpdateOnesongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

# The `ConnectionCursor` is String type, that represents a point of record in data
# set.  Due this point, you may request previous or next records.
scalar ConnectionCursor

input CreateOnesongInput {
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String
}

type CreateOnesongPayload {
  # Created document ID
  recordId: MongoID

  # Created document
  record: song

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input CreateOneuserInput {
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float
}

type CreateOneuserPayload {
  # Created document ID
  recordId: MongoID

  # Created document
  record: user

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

scalar Date

enum EnumsongOrigin {
  Soundcloud
  NCT
  Zing
  YouTube
}

input FilterFindManysongInput {
  _id: String
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterFindManysongInput
}

input FilterFindManyuserInput {
  _id: String
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterFindManyuserInput
}

input FilterFindOnesongInput {
  _id: String
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterFindOnesongInput
}

input FilterFindOneuserInput {
  _id: String
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterFindOneuserInput
}

input FilterRemoveManysongInput {
  _id: String
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterRemoveManysongInput
}

input FilterRemoveManyuserInput {
  _id: String
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterRemoveManyuserInput
}

input FilterRemoveOnesongInput {
  _id: String
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterRemoveOnesongInput
}

input FilterRemoveOneuserInput {
  _id: String
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterRemoveOneuserInput
}

input FilterUpdateManysongInput {
  _id: String
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterUpdateManysongInput
}

input FilterUpdateManyuserInput {
  _id: String
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterUpdateManyuserInput
}

input FilterUpdateOnesongInput {
  _id: String
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterUpdateOnesongInput
}

input FilterUpdateOneuserInput {
  _id: String
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterUpdateOneuserInput
}

# The `ID` scalar type represents a unique MongoDB identifier in collection.
# MongoDB by default use 12-byte ObjectId value
# (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB
# also may accepts string or integer as correct values for _id field.
scalar MongoID

type Mutation {
  songCreate(input: RelayCreateOnesongInput!): CreateOnesongPayload
  _songUpdate(input: RelayUpdateByIdsongInput!): UpdateByIdsongPayload
  songUpdate(input: RelayUpdateOnesongInput!): UpdateOnesongPayload
  songsUpdate(input: RelayUpdateManysongInput!): UpdateManysongPayload
  _songRemove(input: RelayRemoveByIdsongInput!): RemoveByIdsongPayload
  songRemove(input: RelayRemoveOnesongInput!): RemoveOnesongPayload
  songsRemove(input: RelayRemoveManysongInput!): RemoveManysongPayload
  userCreate(input: RelayCreateOneuserInput!): CreateOneuserPayload
  _userUpdate(input: RelayUpdateByIduserInput!): UpdateByIduserPayload
  userUpdate(input: RelayUpdateOneuserInput!): UpdateOneuserPayload
  usersUpdate(input: RelayUpdateManyuserInput!): UpdateManyuserPayload
  _userRemove(input: RelayRemoveByIduserInput!): RemoveByIduserPayload
  userRemove(input: RelayRemoveOneuserInput!): RemoveOneuserPayload
  usersRemove(input: RelayRemoveManyuserInput!): RemoveManyuserPayload
}

input NameOperatorsFilterFindManysongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterFindOnesongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterRemoveManysongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterRemoveOnesongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterUpdateManysongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterUpdateOnesongInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

# An object, that can be fetched by the globally unique ID among all types.
interface Node {
  # The globally unique ID among all types.
  id: ID!
}

input OperatorsFilterFindManysongInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterFindManysongInput

  # Filter value by operator(s)
  timeAdded: TimeAddedOperatorsFilterFindManysongInput

  # Filter value by operator(s)
  name: NameOperatorsFilterFindManysongInput

  # Filter value by operator(s)
  artist: ArtistOperatorsFilterFindManysongInput
}

input OperatorsFilterFindManyuserInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterFindManyuserInput
}

input OperatorsFilterFindOnesongInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterFindOnesongInput

  # Filter value by operator(s)
  timeAdded: TimeAddedOperatorsFilterFindOnesongInput

  # Filter value by operator(s)
  name: NameOperatorsFilterFindOnesongInput

  # Filter value by operator(s)
  artist: ArtistOperatorsFilterFindOnesongInput
}

input OperatorsFilterFindOneuserInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterFindOneuserInput
}

input OperatorsFilterRemoveManysongInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterRemoveManysongInput

  # Filter value by operator(s)
  timeAdded: TimeAddedOperatorsFilterRemoveManysongInput

  # Filter value by operator(s)
  name: NameOperatorsFilterRemoveManysongInput

  # Filter value by operator(s)
  artist: ArtistOperatorsFilterRemoveManysongInput
}

input OperatorsFilterRemoveManyuserInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterRemoveManyuserInput
}

input OperatorsFilterRemoveOnesongInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterRemoveOnesongInput

  # Filter value by operator(s)
  timeAdded: TimeAddedOperatorsFilterRemoveOnesongInput

  # Filter value by operator(s)
  name: NameOperatorsFilterRemoveOnesongInput

  # Filter value by operator(s)
  artist: ArtistOperatorsFilterRemoveOnesongInput
}

input OperatorsFilterRemoveOneuserInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterRemoveOneuserInput
}

input OperatorsFilterUpdateManysongInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterUpdateManysongInput

  # Filter value by operator(s)
  timeAdded: TimeAddedOperatorsFilterUpdateManysongInput

  # Filter value by operator(s)
  name: NameOperatorsFilterUpdateManysongInput

  # Filter value by operator(s)
  artist: ArtistOperatorsFilterUpdateManysongInput
}

input OperatorsFilterUpdateManyuserInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterUpdateManyuserInput
}

input OperatorsFilterUpdateOnesongInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterUpdateOnesongInput

  # Filter value by operator(s)
  timeAdded: TimeAddedOperatorsFilterUpdateOnesongInput

  # Filter value by operator(s)
  name: NameOperatorsFilterUpdateOnesongInput

  # Filter value by operator(s)
  artist: ArtistOperatorsFilterUpdateOnesongInput
}

input OperatorsFilterUpdateOneuserInput {
  # Filter value by operator(s)
  _id: _idOperatorsFilterUpdateOneuserInput
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object that has globally unique ID among all types
  node(
    # The globally unique ID among all types
    id: ID!
  ): Node

  # Data under client context
  viewer: Viewer
}

input RelayCreateOnesongInput {
  record: CreateOnesongInput!

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayCreateOneuserInput {
  record: CreateOneuserInput!

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayRemoveByIdsongInput {
  _id: MongoID!

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayRemoveByIduserInput {
  _id: MongoID!

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayRemoveManysongInput {
  # Filter by fields
  filter: FilterRemoveManysongInput!

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayRemoveManyuserInput {
  # Filter by fields
  filter: FilterRemoveManyuserInput!

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayRemoveOnesongInput {
  # Filter by fields
  filter: FilterRemoveOnesongInput
  sort: SortRemoveOnesongInput

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayRemoveOneuserInput {
  # Filter by fields
  filter: FilterRemoveOneuserInput
  sort: SortRemoveOneuserInput

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayUpdateByIdsongInput {
  record: UpdateByIdsongInput!

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayUpdateByIduserInput {
  record: UpdateByIduserInput!

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayUpdateManysongInput {
  record: UpdateManysongInput!

  # Filter by fields
  filter: FilterUpdateManysongInput
  sort: SortUpdateManysongInput
  skip: Int
  limit: Int = 1000

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayUpdateManyuserInput {
  record: UpdateManyuserInput!

  # Filter by fields
  filter: FilterUpdateManyuserInput
  sort: SortUpdateManyuserInput
  skip: Int
  limit: Int = 1000

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayUpdateOnesongInput {
  record: UpdateOnesongInput!

  # Filter by fields
  filter: FilterUpdateOnesongInput
  sort: SortUpdateOnesongInput
  skip: Int

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input RelayUpdateOneuserInput {
  record: UpdateOneuserInput!

  # Filter by fields
  filter: FilterUpdateOneuserInput
  sort: SortUpdateOneuserInput
  skip: Int

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

type RemoveByIdsongPayload {
  # Removed document ID
  recordId: MongoID

  # Removed document
  record: song

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

type RemoveByIduserPayload {
  # Removed document ID
  recordId: MongoID

  # Removed document
  record: user

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

type RemoveManysongPayload {
  # Affected documents number
  numAffected: Int

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

type RemoveManyuserPayload {
  # Affected documents number
  numAffected: Int

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

type RemoveOnesongPayload {
  # Removed document ID
  recordId: MongoID

  # Removed document
  record: song

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

type RemoveOneuserPayload {
  # Removed document ID
  recordId: MongoID

  # Removed document
  record: user

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

type song implements Node {
  _id: String
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String

  # The globally unique ID among all types
  id: ID!
}

# A connection to a list of items.
type songConnection {
  # Total object count.
  count: Int

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [songEdge]
}

# An edge in a connection.
type songEdge {
  # The item at the end of the edge
  node: song

  # A cursor for use in pagination
  cursor: ConnectionCursor!
}

enum SortConnectionsongEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionuserEnum {
  _ID_DESC
  _ID_ASC
}

enum SortFindManysongInput {
  _ID_ASC
  _ID_DESC
  TIMEADDED_ASC
  TIMEADDED_DESC
  NAME_ASC
  NAME_DESC
  ARTIST_ASC
  ARTIST_DESC
}

enum SortFindManyuserInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOnesongInput {
  _ID_ASC
  _ID_DESC
  TIMEADDED_ASC
  TIMEADDED_DESC
  NAME_ASC
  NAME_DESC
  ARTIST_ASC
  ARTIST_DESC
}

enum SortFindOneuserInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOnesongInput {
  _ID_ASC
  _ID_DESC
  TIMEADDED_ASC
  TIMEADDED_DESC
  NAME_ASC
  NAME_DESC
  ARTIST_ASC
  ARTIST_DESC
}

enum SortRemoveOneuserInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManysongInput {
  _ID_ASC
  _ID_DESC
  TIMEADDED_ASC
  TIMEADDED_DESC
  NAME_ASC
  NAME_DESC
  ARTIST_ASC
  ARTIST_DESC
}

enum SortUpdateManyuserInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOnesongInput {
  _ID_ASC
  _ID_DESC
  TIMEADDED_ASC
  TIMEADDED_DESC
  NAME_ASC
  NAME_DESC
  ARTIST_ASC
  ARTIST_DESC
}

enum SortUpdateOneuserInput {
  _ID_ASC
  _ID_DESC
}

input TimeAddedOperatorsFilterFindManysongInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input TimeAddedOperatorsFilterFindOnesongInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input TimeAddedOperatorsFilterRemoveManysongInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input TimeAddedOperatorsFilterRemoveOnesongInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input TimeAddedOperatorsFilterUpdateManysongInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input TimeAddedOperatorsFilterUpdateOnesongInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input UpdateByIdsongInput {
  _id: String!
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String
}

type UpdateByIdsongPayload {
  # Updated document ID
  recordId: MongoID

  # Updated document
  record: song

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input UpdateByIduserInput {
  _id: String!
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float
}

type UpdateByIduserPayload {
  # Updated document ID
  recordId: MongoID

  # Updated document
  record: user

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input UpdateManysongInput {
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String
}

type UpdateManysongPayload {
  # Affected documents number
  numAffected: Int

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input UpdateManyuserInput {
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float
}

type UpdateManyuserPayload {
  # Affected documents number
  numAffected: Int

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input UpdateOnesongInput {
  timeAdded: Float
  originalURL: String
  origin: EnumsongOrigin
  name: String
  artist: String
  streamURL: String
  thumbURL: String
  lyric: String
  play: Float
  isUp: Boolean
  author: String
}

type UpdateOnesongPayload {
  # Updated document ID
  recordId: MongoID

  # Updated document
  record: song

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

input UpdateOneuserInput {
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float
}

type UpdateOneuserPayload {
  # Updated document ID
  recordId: MongoID

  # Updated document
  record: user

  # The globally unique ID among all types
  nodeId: ID

  # The client mutation ID used by clients like Relay to track the mutation. If
  # given, returned in the response payload of the mutation.
  clientMutationId: String
}

type user implements Node {
  _id: String
  userName: String
  isHost: Boolean
  isOnline: Boolean
  lastModified: Date
  balance: Float

  # The globally unique ID among all types
  id: ID!
}

# A connection to a list of items.
type userConnection {
  # Total object count.
  count: Int

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [userEdge]
}

# An edge in a connection.
type userEdge {
  # The item at the end of the edge
  node: user

  # A cursor for use in pagination
  cursor: ConnectionCursor!
}

type Viewer {
  songConnection(
    # Forward pagination argument for returning at most first edges
    first: Int

    # Forward pagination argument for returning at most first edges
    after: ConnectionCursor

    # Backward pagination argument for returning at most last edges
    last: Int

    # Backward pagination argument for returning at most last edges
    before: ConnectionCursor

    # Filter by fields
    filter: FilterFindManysongInput

    # Sort argument for data ordering
    sort: SortConnectionsongEnum = _ID_DESC
  ): songConnection
  songs(
    # Filter by fields
    filter: FilterFindManysongInput
    skip: Int
    limit: Int = 1000
    sort: SortFindManysongInput
  ): [song]
  song(
    # Filter by fields
    filter: FilterFindOnesongInput
    skip: Int
    sort: SortFindOnesongInput
  ): song
  _song(_id: MongoID!): song
  userConnection(
    # Forward pagination argument for returning at most first edges
    first: Int

    # Forward pagination argument for returning at most first edges
    after: ConnectionCursor

    # Backward pagination argument for returning at most last edges
    last: Int

    # Backward pagination argument for returning at most last edges
    before: ConnectionCursor

    # Filter by fields
    filter: FilterFindManyuserInput

    # Sort argument for data ordering
    sort: SortConnectionuserEnum = _ID_DESC
  ): userConnection
  users(
    # Filter by fields
    filter: FilterFindManyuserInput
    skip: Int
    limit: Int = 1000
    sort: SortFindManyuserInput
  ): [user]
  user(
    # Filter by fields
    filter: FilterFindOneuserInput
    skip: Int
    sort: SortFindOneuserInput
  ): user
  _user(_id: MongoID!): user
}
